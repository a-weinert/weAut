/*  Copyright 2021 Albrecht Weinert, Bochum, Germany (a-weinert.de)
 *  All rights reserved.
 *  
 *  This file is part of Frame4J notwithstading being in de.weAut... 
 *  ( frame4j.de  https://weinert-automation.de/software/frame4j/ )
 * 
 *  Frame4J is made available under the terms of the 
 *  Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  https://www.eclipse.org/legal/epl-2.0/  or as text in
 https://weinert-automation.de/java/docs/frame4j/de/frame4j/doc-files/epl.txt
 *  within the source distribution 
 */
package  de.weAut.demos;
import de.weAut.PiUtil;     // Raspberry Pi handling utilities (IO lock)
import de.frame4j.util.ComVar;
import de.weAut.ClientPigpiod;

import java.io.IOException;

/** <b>Port of pigpiod test and demo program testOnPi from C to Java</b>.<br />
 *  <br />
 *  This port uses Joan N.N's pigpio library's 
 *  <a href="http://abyz.me.uk/rpi/pigpio/sif.html">socket interface</a> 
 *  directly. Hence, it is 100% pure Java &mdash; that means no JNI
 *  (Java native interface) is used.<br />
 *  <br />
 *  
 *  TO BE PORTED YET:  Sorry this implementation has'nt even startet.
 *  

 *  <br />
 *  Copyright  &copy;  2021   Albrecht Weinert <br />
 *  @author   Albrecht Weinert a-weinert.de
 *  @version  $Revision: 32 $ ($Date: 2021-03-22 18:35:41 +0100 (Mo, 22 Mrz 2021) $)
 */
// so far:   V.  21  (21.05.2019) : new, minimal functionality
//           V. -26  (31.05.2019) : three LEDs, IO lock 

public class TestOnPi implements PiUtil {

/** The LEDs to blink.  
 *  
 *  The default pins for rd/ye/gn are 11, 22, and 13. <br />
 *  This is the traditional 2017 experimental setup. With a piTraffic 
 *  (cross roads) head  {@link #ledGNpin} would be south yellow and
 *  {@link #ledYEpin} west green.  
 */
  public static int ledRDpin = 11; // piTraffic south rd
  public static int ledYEpin = 22; // piTraffic west  gn
  public static int ledGNpin = 13; // piTraffic south ye
  
  ClientPigpiod  pI; 
  
//--- properties exposed as MBean -------------------------------------------   
  
  boolean runOn; // run endless resp. while true
  int cycCount; // incremented on every red & green blink cycle (600ms)
  boolean yLd; // status of the yellow LED(s)

/** The application start.
*  
*  Will blink with three LEDs in an endless loop (in ::doIt()). 
*  Can be stopped by signal (cntlC), kill command and the like.
*  @param args start parameters, not used (yet).
*/
  public static void main(String[] args){
    PiUtil.out.println("\n\n  TestOnPi start" +
               (ComVar.ON_PI ? " on Pi" : " on " + ComVar.HOST_NAME
                                               + " under " + ComVar.OS)); 
    new TestOnPi().doIt();
  } // main(String[])

/** The application's work.
*  
*  When no (startup) error occurs this will run in an endless loop.
*/
  public void doIt(){
     final int oL = openLock(null, false);
     runOn = oL == 0;
     if (! runOn) {
       out.println("  TestOnPi getIOlock error: "
                               + PiUtil.errorText(oL));
       return;
     }
     
     try {
      pI = new ClientPigpiod(null); // local connect to Pi3 0 4 (default)
      out.println("  TestOnPi connect " + pI);
   } catch (IOException e1) {
      e1.printStackTrace();
      return; // can't open socket
   }  // null, 8888, 2
     
   int LEDrd = pI.thePi.gpio4pin(ledRDpin);
   int LEDgn = pI.thePi.gpio4pin(ledGNpin);
   int LEDye = pI.thePi.gpio4pin(ledYEpin);
   
   Runtime.getRuntime().addShutdownHook(new Thread(() -> {
     runOn = false;
     if (pI != null) {
       out.println("\n  RdGnPiGpioDBlink shutdown " + pI);
       pI.releaseOutputsReport(out);
       try {
           pI.disconnect();
        } catch (IOException e) { } 

        // pigpio.gpioTerminate();
     } else { // pI not null else null
       out.println("\n  RdGnPiGpioDBlink shutdown ");
     } // pI null
       // e.printStackTrace();
  //   }
     closeLock();
  })); // shutdownHook.run()
  
   out.println(" TEST set mode output rd gn ye 14 mA");
   pI.logCommand(pI.setMode(LEDrd, GPIO_OUT));
   pI.logCommand(pI.setMode(LEDgn, GPIO_OUT));
   pI.logCommand(pI.setPullR(LEDgn, PI_PUD_DOWN));
   pI.logCommand(pI.setMode(LEDye, GPIO_OUT));
   pI.logCommand(pI.setPadS(0, 14));
   System.out.println(" TEST start endless loop");
   for(;runOn; ++cycCount) {                        // red green time/state  yellow
      pI.logIfBad(pI.setOutput(LEDrd, HI)); // on
      thrDelay(200);                      //          200 ms red
      yLd = !yLd;                         //                      toggle
      pI.logIfBad(pI.setOutput(LEDye, yLd));
      pI.logIfBad(pI.setOutput(LEDgn, HI)); //      on
      thrDelay(100);                      //          100 ms both
      pI.logIfBad(pI.setOutput(LEDrd, LO)); // off
      thrDelay(100);                      //          100 ms green
      pI.logIfBad(pI.setOutput(LEDgn, LO)); //     off
      thrDelay(200);                      //          200 ms dark
   } // for endless
  } // doIt()
} // TestOnPi (sorry until now just shortened RdGnPiGpioDBlink)
