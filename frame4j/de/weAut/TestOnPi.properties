#  Property-File for TestOnPi.java  TestOnPi.properties
#  Copyright (c) 2021   Albrecht Weinert   a-weinert.de
propFileName=  TestOnPi.properties
propFileVers=  V.$Revision: 52 $ 
propFileDate=  $Date: 2021-06-12 13:01:58 +0200 (Sa, 12 Jun 2021) $
#  so far:
#  V.  37  (14.04.2021) : new
#  V.  50  (29.05.2021) : operable, parse partial

# program's common setting  "pre-partial" 
word-0=argHost
word-1=argPort
option-timeout= argTimeout
option-uselock= useLock=true

#option-xyz hint: Frame4J evaluates options ignoring case by putting them to 
# lower case and comparing them to the xyz part. That MUST be lowercase, here. 

option-pi3= argPiType=3
option-pi4= argPiType=4
option-pi0= argPiType=0
option-pi1= argPiType=1
option-pi2= argPiType=2

option-north= ledRDpin2=29 ## ledYEpin2=31 ## ledGNpin2=33
option-east=   ledRDpin3=36 ## ledYEpin3=38 ## ledGNpin3=40
option-south=   ledRDpin0=11 ## ledYEpin0=13 ## ledGNpin0=15
option-west=     ledRDpin[1]=16 ## ledYEpin[1]=18 ## ledGNpin[1]=22
option-ledtradit= ledRDpin4=11 ## ledYEpin4=22 ## ledGNpin4=13
option-inport= inPort
option-outport= outPort

# program's properties for start values settable by argument prop=value
stepDelay = 80
cycLim = 0
stepVal  = 10
val    = 100
valUp = 250
valLo = 5

# action value "+" options (left to be re-evaluated while running)
option+val= val
option+valup= valUp
option+vallo= valLo
option+stepval= stepVal
option+stepdelay= stepDelay
option+cyclim = cycLim


# action "+" options (left to be evaluated while running)
# = ##  : keep word parameters following for (partial) evaluation by app code 
option+blink=##
option+blinkleds=##
option+wink=##
option+winkservo=##
option+winkpwm=##
option+out= ##

#option-xyz hint: Frame4J evaluates options ignoring case by putting them to 
#     lower case and comparing them to the xyz part. That MUST be lowercase. 


# Help texts (German & English)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

helpText=TestOnPi ist ein Demo-Programm für Pi-IO - lokal und remote.  \
\n \
\n Es läuft auf jedem Rechner mit Java und Frame4J und funktioniert mit \
\n jedem Raspberry Pi mit laufendem pigpiod daemon. \
\n \
\n  Aufruf    :  java TestOnPi [host [port]] [optionen] \
\n               host ist der Raspberry Pi mit der IO via piogpiod; default \
\n               ist auf einem Pi dieser selbst; sonst p.r.v.67, wenn \
\n               p.v.r.me die IP-Adresse, wo TestOnPi läuft, ist.  \
\n               port ist der Socket-port des pigpiod Daemons; default 8888  \
\n  Beispiel 1:  java TestOnPi -south \
\n  Beispiel 2:  java TestOnPi raspi67 8888 -west \
\n \
\n  Generelle Optionen : (fürs ganze Programm) \
\n -pi3 -pi4 -pi0  :  Pi-Typ mit 40-pol. Standard-IO-Pfostenverbinder \
\n -p1 -pi2   :  Pi-Typen mit abweichender IO-Belegung; default: Pi3 \
\n -timeout   :  Nachfolgende Parameter ist socket timeout in ms; def. 10s \
\n -LEDtradit :  traditionelle Belegung für LEDpins: 11 22 13 \
\n -north -east -south -west : Zufügen einer trafficPi-Ampeln \
\n               als LEDs rt, ge, gn; N: pin 29 31 33, E: 36 38 40  \
\n               S: 11 13 15, W: 16 18 22    \
\n -outport  :  nächster Parameter Ausgang als Pin oder GPIO mit Prefix G \
\n              Beispiel (buzzer des trafficPi shield auf Pi3): \
\n                      -output 12  oder  -output G18  \
\n -inPort   :  nächster Parameter Eingang als Pin oder GPIO mit Prefix G; \
\n              Postfix U D N setzt pull up, down, nicht; sonst wie es war \
\n -useLock  :  Verwende IO-lock-Datei oder -Prozess; default: aus  \
\n \
\n  Aktionen :  (nach den generellen Einstellungen einzeln ausgeführt ) \
\n -out      :  Setze Ausgang mit nächstem Parameter: ON, OFF (digital); \
\n              0..255 (PWM 0..100%); 500..1500..2500 (links..mittig..rechts)\
\n -blinkLEDs -blink:  Blinken mit den LEDs (rt, ge, gn)  Falls inPort und \
\n              outPort gesetzt, Ausgang mit invertiertem Eingang setzen \
\n -wink     :  Links-Rechts-Winken mit Servo (wenn val innerhalb  \
\n              [500..2500]) bzw. Auf-Ab mit PWM (wenn innerhalb [0..255]) \
\n -winkServo:  -wink mit Vorbesetzung [580 .. 1501 .. 2420] \
\n -winkPWM:    -wink dto. mit [2 .. 127 .. 254] (valLo .. val .. valUp) \
\n -cycLim   :  nächster Parameter Anzahl Schritte für folgende Aktionen \
\n              default: 0; 0: endlos außer cntl-C oder JMX/JConsole \
\n -stepVal  :  nächster Parameter Schrittweite (default 10) \
\n -stepDelay:  nächster Parameter Schrittzeit/ms  2..600000; default 80ms \
\n -val -valLo -valUp: nächster Parameter Startwert bzw. Grenzwerte \
\n Anfangswerte können mit Wertzuweisungen gesetzt werden:  cycLim=0 \
\n              stepDelay=80   stepVal=10   val=100   valLo=5   valUp=250 \
%hlpfwopt%\
\n  1.) Ein Parameter mit Wildcardzeichen  (?, *) muss i.a mit zwei \
\n      Doppelanführungszeichen (\") geklammert werden, da die meisten JVMs \
\n      solche Parameter sonst in mehrere Dateinamen auflösen. Als Ersatz\
\n      für * kann daher auch + eingesetzt werden. \
\n      (Ende Hilfetext in %propFileName% %propFileVers% (%propFileDate%), de)


en.helpText=TestOnPi is a demo program for Pi-IO - local and remote. \
\n \
\n It runs on every machine with Java and Frame4J and works with every  \
\n Raspberry Pi with a pigpiod daemon running. \
\n \
\n  Execute   :  java TestOnPi [host [port]] [options] \
\n               host is the Raspberry Pi with IO via pigpioD; default on \
\n               a Pi is the Pi itself; otherwise its IP p.r.v.67, where \
\n               p.r.v.me is the IP of TestOnPi's machine. \
\n               port is the pigpiod daemon's socket port; default 8888  \
\n  Example 1 :  java TestOnPi -south \
\n  Example 2 :  java TestOnPi raspi67 8888 -west \
\n \
\n \
\n  General options : (common for the program) \
\n -pi3 -pi4 -pi0   : Pi type with standard 40 pin IO connector \
\n -p1 -pi2  :  Pi types with other IO pin assignment; default: Pi3 \
\n -timeout  :  next parameter is socket timeout in ms; default 10s \
\n -LEDtradit:  traditional assignment: LED pins 11 22 13 \
\n -north -east -south -west : Add a trafficPi traffic light as LEDs \
\n              rd, ye, gn.  N: pin 29 31 33, E: 36 38 40  \
\n              S: 11 13 15, W: pin 16 18 22   \
\n -outPort  :  next parameter sets an output as pin or GPIO by prefix G \
\n              Example (on a Pi 3 trafficPi shield's buzzer): \
\n                      -output 12  or  -output G18  \
\n -inPort   :  next parameter sets an input as pin or GPIO mit Prefix G \
\n              postfix U D N sets pull up, down, none; else leave as is \
\n -useLock  :  do require IO-lock (file or process); default: off  \
\n \
\n  Actions  :  (do execute sequentially after the general settings done) \
\n -out      :  Set output by next parameter: ON, OFF (digitally); \
\n              0..255 (PWM 0..100%); 500..1500..2500 (left..middle..right) \
\n -blinkLEDs -blink :  Blink the LEDs (rt, ge, gn; 600 ms cycle)  If inPort \
\n -            and outPort given set output (digitally) by inverted input \
\n -wink     :  Wipe the servo (if val in the range [500..2500])  \
\n              respectively up down by PWM (if within [0..255])  \
\n -winkServo:  -wink with preset [580 .. 1501 .. 2420] \
\n -winkPWM:    -wink with preset [2 .. 127 .. 254] (valLo .. val .. valUp) \
\n -cycLim   :  next parameter is number of steps / cycles for actions; \
\n              default: 0; 0: for ever (stop by cntl-C or JMX/JConsole) \
\n -stepVal  :  next parameter is width of up/down steps (>0; default 20) \
\n -stepDelay:  next parameter is step time/ms  (2..600000; default 80ms) \
\n -val -valLo -valUp: next parameter is start value respectively limits  \
\n Start values can be set by assignment:    cycLim=0  \
\n              stepDelay=80   stepVal=10   val=100   valLo=5   valUp=250 \
%hlpfwopt%\
\n  1.) Parameters containing wild cards (?, *) have to be double quoted. \
\n      Otherwise the JVM may expand this parameter secretly (a java \
\n      feature, that is a dangerous bug). As a substitute methods of this \
\n      framework Frame4J do accept a plus sign (+) for the asterisk (*). \
\n      (end of en.helpText in %propFileName% %propFileVers%, %propFileDate%)

en.releaseLEDs = release LED outputs
de.releaseLEDs = LED-Ausgabe freigeben
fr.releaseLEDs = fermer sortie LEDs

en.releaseOut = release output
de.releaseOut = Ausgabe freigeben
fr.releaseOut = fermer sortie
