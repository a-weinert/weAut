#  Property-File for FuR.java
#  V.$Revision: 1 $ ($Date: 2017-01-14 13:19:07 +0100 (Sa, 14 Jan 2017) $)
#  V0.00  (21.12.2000) : new
#  V0.03  (17.04.2002) : FuR changed to partial (word-... dropped)
#  V0.10  (24.05.2002) : AppBase aoclog error removed
#  V0.11  (18.07.2002) : Parameter unambiguous sequence
#  V0.12  (14.04.2006) : only without = makes a null
#  V.o69+ (11.02.2009) : -useReplDate
#  V.003+ (06.01.2017) :  SVN new on Ubuntu, (hence) filModEnc 

#  Copyright 2000 - 2009, 2017  Albrecht Weinert



#  FuR help texts  (de, en)
#  ~~~~~~~~~~~~~

de.helpText=FuR bietet Suchen und Ersetzen in Textdateien. \
\n \
\n  Aufruf    : java  FuR @propFile [optionen] Dir\\Name old [oldEnd] new  \
\n              Dir = Verzeichnis, Name = Dateiname[n] oder Typlisten\
\n              old = alter zu ersetzender Text new = Ersatztext  \
\n              old .. oldEnd = Anfang .. Ende des zu ersetzenden Texts  \
\n              propFile = PropertyTextdatei, sie kann weitere indizierte \
\n              (1..99) Ersetzungsanweisungen enthalten: old [oldEnd] \
\n              new|newFile [ignoreCase] [ignoreWS] [keepBraces] \
\n   \n\
\n    Optionen: \
\n -oneDay    :  Nur in den letzten 24 h modifizierte Dateien akzeptieren.\
\n -days n    :  Nur in den letzten n Tagen modifizierte Dateien akzeptieren.\
\n -since zeit:  Nur seit zeit modifizierte Dateien akzeptieren.\
\n -til zeit  :  Nur bis zeit modifizierte Dateien akzeptieren.\
\n               Underline _ ersetzt das Leerzeichen bei Zeitangaben zu\
\n               -since und -til bei Zeitangaben, z.B. 03.12.00_16:45.\
\n -r         :  Rekursiv, mit Unterverzeichnissen\
\n -ThoseDirs :  Der nachfolgende Parameter gibt Namenskriterien für \
\n               Unterverzeichnisse vor.  Ohne -ThoseDirs oder -OmitDirs \
\n               werden bei Unterverzeichnissen alle Namen akzeptiert. \
\n -OmitDirs  :  Der nachfolgende Parameter gibt eine Liste nicht zu \
\n               berücksichtigender Unterverzeichnisse an. Beispiel: \
\n               -OmitDirs \"\\WinNT;\\DOS;\\Programme\  \
\n -G         :  G/K-Schreibung bei Text old Suche relevant (default). \
\n -i, -ignoreCase :  G/K-Schreibung bei Text old Suche nicht relevant. \
\n -w, -ignoreWS   :  White spaces bei der Textsuche nicht relevant. \
\n -setFileDate: Dateidatum bei ggf. Änderung aktuell setzen. \
\n -keepFileDate   : Dateidatum bei ggf. wie ursprünglich lassen. \
\n -incFileDate: Bei ggf. Änderung ursprüngl. Zeit + 1/2 s setzen (default). \
\n -useReplDate    : Bei Ersatztexten mit (eigenem Datei-) Änderungsdatum \
\n               setze ggf. deren Maximum als neues Dateidatum (default). \
\n -filModEnc :  Der nachfolgende Parameter gibt die Kodierung aller zu \
\n               modifizierender Textdateien an. Default: Platform, d.h. \
\n               meist ISO-8859-1 bei westeuropäischem Windows; Linux: UTF-8.\
%hlpfwopt%\
\n  1.) Ein Parameter mit Wildcardzeichen  (?, *)  ist im Allgemeinen mit \
\n      zwei Doppelanführungszeichen (\") zu klammern. Sternchen (*) kann \
\n      aber auch durch + ersetzt werden. \
\n                      (FuR.properties helpText 07.01.2017, A.W., de)

en.helpText=FuR features find and replace in text files. \
\n \
\n  Execute   : java  FuR @propFile [options] Dir\\Name old [oldEnd] new  \
\n              Dir = directory, Name = filename[s] or type lists\
\n              old = old text to replace  new = substitute text  \
\n              old .. oldEnd = begin .. end of text to be replaced  \
\n              propFile = .properties text file; may contain further indexed \
\n              (1..99) replacement directives: old [oldEnd] \
\n              new|newFile [ignoreCase] [ignoreWS] [keepBraces] \
\n   \n\
\n    Options : \
\n -oneDay    :  Regard only files modified within the last 24 hours.\
\n -days n    :  Regard only files modified within the last n days.\
\n -since time:  Regard only files modified after specified time. \
\n -til time  :  Regard only files modified after specified time. \
\n               Underscore _ may replace spaces in time specifications after\
\n               -since and -til, e.g.  03.12.08_16:45.\
\n -r         :  Visit subdirectories recursively. \
\n -ThoseDirs :  The next parameter specifies name criteria for the \
\n               subdirectories to visit. Without -ThoseDirs or -OmitDirs \
\n               all subdirectory names are accepted. \
\n -OmitDirs  :  The next parameter is a list of subdirectories not to visit.\
\n               Example:  -OmitDirs \"\\WinNT;\\DOS;\\Programme\  \
\n -case, -g       : Search for (old) text is case sensitive (default). \
\n -i, -ignoreCase : Search for (old) text is not case sensitive . \
\n -w, -ignoreWS   : White spaces are ignored for text matching. \
\n -setFileDate    : Set file date new if modified by this application. \
\n -keepFileDate   : Keep last modification date, even in face of replacements.\
\n -incFileDate    : In case of replacements increase last modification date \
\n                   by just 1/2 s (default). \
\n -useReplDate    : In case of replacements with (own file) modification \
\n               dates use their maximum as new modification date (default). \
\n -filModEnc :  The following parameter names the encoding of all text files \
\n               to be modified. Default: platform, i.e mostly  ISO-8859-1  \
\n               on western European Windows; on Linux: UTF-8.  \
%hlpfwopt%\
\n  1.) A parameter containing wild cards  (?, *)  has to be bracketed by \
\n      double quotes (\") to avoid platform's or Java's wildcard expansion. \
\n      Starlet (*) may be replaced by plus (+) to avoid both. \
\n                      (FuR.properties helpText 07.01.2017 , A.W., en)



#  FuR parameter evaluation
#  ~~~~~~~~~~~~~~~~~~~~~~~~

#     -option=  effect   [##  effect  2 ...

option-r=       recursion=true
option-ommitdirs= omitDirs
option-omitdirs= omitDirs
option-thosedirs= thoseDirs

option-oneday=  days=1
option-days=    days
option-since=   days=nosetting ## since
option-til=     days=nosetting ## til

option-g=       ignoreCase=false
option-case=    ignoreCase=false
option-i=       ignoreCase=true
option-ignorecase=       ignoreCase=true
option-ignorews  =       ignoreWS=true
option-w         =       ignoreWS=true
 
load@prop = on

# End of parameter evaluation and parsing (Syntax: see Prop.parse)
# Additionally all following properties can be changed (in the command
# line) by a parameter "name=vale".
# Hint: Option's names here only in lower case!!
#       Prop.parse() accepts all cases including mixed.


# Defined properties with default values
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# encoding of files to be modified
option-filmodenc = filModEnc
filModEnc=defaultEncoding

# text replacements and directory
oldText
oldEnd
newText
directory

# this property if not empty or null defines a text to exclude all files
# containing it from being worked on
ignFilesWith
ignFilesWith2

types


recursion = false
ignoreCase= false
ignoreWS  = false
useNewModif = true
keepBraces  = true

incFileDate = true
keepFileDate= true
option-setfiledate = incFileDate=false ## keepFileDate=false  ## useNewModif = false
option-keepfiledate  = incFileDate=false ## keepFileDate=true ## useNewModif = false
option-incfiledate  = incFileDate=true ## keepFileDate=true ## useNewModif = false
option-userepldate  = incFileDate=false ## keepFileDate=true ## useNewModif = true

de.tooManStandPar = Zu viele / falsche Standardparameter:
en.tooManStandPar = Too many / wrong standard parameters:

de.oldNewEqual = Such- und Ersetzungstext = \"{0}\"  sind gleich
en.oldNewEqual = Search and replacement texts = \"{0}\"  are equal

de.noSpecSearch = Keine Angabe zum Suchtext
en.noSpecSearch = No search text specified

de.replSum = \n  ///   {0} Ersetzung{0en} in {1} / {2} Datei{2en}\n
en.replSum = \n  ///   {0} replacement{0s} in {2} / {2} file{2s}\n
