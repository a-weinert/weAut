#  Property-File for Update.java
propFileName=  Update.properties
propFileVers=  V.$Revision: 24 $ 
propFileDate=  $Date: 2019-05-27 20:36:56 +0200 (Mo, 27 Mai 2019) $
#  so far:
#  V0.02 (03.12.2000 16:05): since, til
#  V0.04 (04.04.2002 11:14): -makenew
#  V0.10 (24.04.2002 13:55): de, AppBase
#  V0.12 (20.01.2001 11:37): verbose silent
#  V2.21 (25.01.2005 12:54): common help -aoc
#  Copyright 1999 - 2002, 2004 -2005   Albrecht Weinert

# Update parameter evaluation

option-norec=   recursion=false
option-r=       recursion=true
option-oneday=  days=1
option-days=    days
option-since=   days=nosetting ## since
option-seit=    days=nosetting ## since
option-til=     days=nosetting ## til
option-until=   days=nosetting ## til
option-bis=     days=nosetting ## til
option-nodif=   difOld=0
option-withcase=lcNames=false
option-nonew=   noNew=true
option-makenew= noNew=false
option-nomd=    noMd=true
option-omitdirs= omitDirs
option-thosedirs= thoseDirs
option-log=     logDat
option-nozone=  zoneSafe=false
option-locase=     lcNames=true
option-withcase=   lcNames=false
option-lcnames=    lcNames=true
option-nolcfortypes = noLCforTypes
option-disk=  difOld=2011
option-zone=  difOld=120011 ## zoneSafe=true
option-xcopy=     difOld=-1 ## zoneSafe=false
option-noreplace= difOld=-2 ## zoneSafe=false


option-delempty=  delEmpty=true
option-les=       delEmpty=true  ## delEmptySource=false
option-ndelempty= delEmpty=false ## delEmptySource=true

word-0=source
word-1=dest
word-2=back

# Update name with version and start time 
# Has to be set by the application and is 
# used to generate texts and file names

stJMT = Y-m-j 
stHM  = h-i 
stJMTHM = Y-m-j_h-i 

# Help texts (German & English)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

helpText=Update führt Verzeichnisse und Dateien nach. \
\n \
\n  Aufruf    :  java Update [optionen] QVZ[\\Name] ZVZ [BVZ] \
\n               QVZ = Quell-, ZVZ = Zielverzeichnis, BVZ = Backup-Verz. \
\n               Name= Name(n) der nachzuführenden Dateien. Dabei sind sog.\
\n               Wildcardzeichen (+*?) in Dateinamen (a*.java) genauso \
\n               möglich wie eine Liste von Dateitypen (.htm;html;gif;jpg).\
\n               Zum Kreieren von Dateinamen können auch die Properties \
\n               stJMT, stHM und stJMTHM (Wert zur Zeit %stJMT%, %stHM% \
\n               und %stJMTHM%) eingesetzt werden. \
\n   Hinweis  :  Die Namen dieser Properties müssen in Prozentzeichen \
\n               geklammert werden; also würde z.B. aus \
\n                  java Update -oneday .\\ .\\tmp\\arch%%stJMTHM%%iv\\   \
\n               zur Zeit effektiv   \
\n                  java Update -oneday .\\ .\\tmp\\arch%stJMTHM%iv\\   \
\n               In Windows-Batch-Dateien (nicht in der Kommandozeile!) sind \
\n               diese Prozentzeichen doppelt einzugeben (arch%%%%stJMTHM%%%%iv).\
\n   \
\n  Beispiel 1 :  java Update .\\+.java z:\\sicherung\\ g:\\backup\\ -r -oneday \
\n  Beispiel 2 :  java Update .\\.html;gif;jpg -r -loCase -nonew  w:\\web \
\n \
\n  Optionen  : \
\n -noMD      :  Kein Erzeugen nicht vorhandener ZVZs (no makeDirs) \
\n -SameDirs  :  Gleiche Kriterien für Namen von Unterverzeichnissen wie \
\n               für Dateinamen. \
\n -ThoseDirs :  Der nachfolgende Parameter gibt Namenskriterien für \
\n               Unterverzeichnisse vor.   Ohne -ThoseDirs oder -SameDirs \
\n               werden bei Unterverzeichnissen alle Namen akzeptiert. \
\n -OmitDirs  :  Der nachfolgende Parameter gibt eine Liste nicht zu   \
\n               berücksichtigender Unterverzeichnisse an. Beispiel:   \
\n               -OmitDirs \"\\WinNT;\\DOS;\\Programme\" \
\n               Achtung: ThoseDirs keine Liste; OmitDirs keine Wildcards.\
\n -noNew     :  Ein Update ins Zielverzeichnis erfolgt nur für Dateien,  \
\n               die dort bereits existieren.   (Also kein    \
\n               Hinzufügen neuer Dateien; schließt -nomd ein.)  \
\n -makeNew   :  Im Zielverz. nicht vorh. Dateien werden erzeugt (default) \
\n -delEmpty  :  Dateien der Länge 0 im Quellverzeichnis werden nicht vom \
\n               Quell- ins Zielverzeichnis kopiert sondern in beiden  \
\n               Verzeichnissen (oder in keinem) gelöscht (default). \
\n -lEs       :  wie -delEmpty, aber die Quelldatei der Länge 0 wird nicht \
\n               gelöscht. \
\n -nDelEmpty :  Hebt -delEmpty und -lEs auf (Kein Löschen) \
\n -loCase    :  Dateien und Verzeichnisse werden mit Namen nur in Klein-\
\n  -lcNames     buchstaben erzeugt.\
\n -noLCforTypes  : Der nachfolgende Parameter gibt eine Liste von Datei- \
\n               typen an, die trotz -lcNames nicht in Kleinschrift zu \
\n               erzeugen sind. Umfassende Verzeichnisnamen werden weiterhin \
\n               ggf. in Kleinschrift erzeugt. default: .java;.class \
\n -disk      :  Mindestens 2s Unterschied für ungleiches Dateialter. \
\n -noDif     :  0s statt (default) mindestens 2 min Unterschied für \
\n               ungleiches Dateialter. \
\n -noZone    :  Keine Zeitzonen, Sommer-/Winterzeitmaßnahmen. \
\n -zone      :  Mindestens 2 Minuten Unterschied für ungleiches Dateialter \
\n               oder drei Stunden wenn Quelle älter als 3 Tage \
\n -xcopy     :  Kopieren, auch wenn Quelldatei älter als Zieldatei. \
\n -noReplace :  Vorhandene (Ziel-) Datei wird nicht ersetzt. \
\n -oneDay    :  Nur in den letzten 24 h modifizierte Dateien akzeptieren. \
\n -days n    :  Nur in den letzten n Tagen modifizierte Dateien akzeptieren.\
\n -since zeit:  Nur seit zeit modifizierte Dateien akzeptieren.\
\n -til zeit  :  Nur bis zeit modifizierte Dateien akzeptieren.\
\n               Underline _ ersetzt das Leerzeichen bei Zeitangaben zu\
\n               -since und -til bei Zeitangaben, z.B. 24.04.2002_15:32.\
\n -r         :  Rekursiv, d.h. inklusive Unterverzeichnisse. \
\n -noRec     :  Nicht rekursiv, d.h. ohne Unterverzeichnisse (default). \
\n -reverse   :  Rückwärts, Rollen der Parameter QVZ und ZVZ vertauschen. \
\n -forward   :  Nicht rückwärts (default), QVZ bleibt Quelle etc. \
%hlpfwopt%\
\n  1.) Ein Parameter mit Wildcardzeichen  (?, *) muss i.a mit zwei \
\n      Doppelanführungszeichen (\") geklammert werden, da die meisten JVMs \
\n      solche Parameter sonst in mehrere Dateinamen auflösen. Als Ersatz\
\n      für * kann daher auch + eingesetzt werden. \
\n      (Ende Hilfetext in %propFileName% %propFileVers% (%propFileDate%), de)


en.helpText=Update keeps directories and files up todate. \
\n \
\n  Execute   :  java Update [options] QVZ[\\Name] ZVZ [BVZ] \
\n               QVZ = source, ZVZ = destination directory, BVZ = back-up dir. \
\n               Name= name(s) of file(s) to be updated. wildcards (+*?) in names\
\n               (a*.java) are possible, as well as a list of file types \
\n               (.htm;html;gif;jpg). Also, for creating file and directory names\
\n               you can use the properties stJMT, stHM and stJMTHM (values at \
\n               present  %stJMT%, %stHM% and %stJMTHM%). \
\n   Note     :  Keys for those properties have to be bracketed in percent signs;\
\n                  java Update -oneday .\\ .\\tmp\\arch%%stJMTHM%%iv\\   \
\n               would (at this time) become effectively \
\n                  java Update -oneday .\\ .\\tmp\\arch%stJMTHM%iv\\   \
\n               In Windows batch files (not for the command shell) those percent\
\n               sign have to be doubled  (arch%%%%stJMTHM%%%%iv).\
\n   \
\n  Example 1 :  java Update .\\+.java z:\\sicherung\\ g:\\backup\\ -r -oneday \
\n  Example 2 :  java Update .\\.html;gif;jpg -r -loCase -nonew  w:\\web \
\n \
\n  Options   : \
\n -noMD      :  No making of non existent destination directories. \
\n -SameDirs  :  Same criteria for the names of sub-directories as for the names \
\n               files. \
\n -ThoseDirs :  next parameter specifies criteria for the names of \
\n               sub-directories; without the options -ThoseDirs or -SameDirs all\
\n               names for sub-directories will be accepted. \
\n -OmitDirs  :  next parameter specifies a list of sub-directories not to be \
\n               considered / visited. Example:   \
\n               -OmitDirs \"\\WinNT;\\DOS;\\Programme\" \
\n               Attention: ThoseDirs no list; OmitDirs no wildcards.\
\n -noNew     :  updates files to destination directories only if already  \
\n               existing there. I.e. no making of new files; -nomd is implied.\
\n -makeNew   :  files not existing in the destination directories will be \
\                created default) \
\n -delEmpty  :  files with no content (length 0 bytes) in the source \
\n               directories will not be copied / updated to the destination \
\n               directories, but will be either deleted in both directories \
\n               or be left in both (default). \
\n -lEs       :  as -delEmpty, but the (empty) source file won't be deleted. \
\n -nDelEmpty :  Negates -delEmpty and -lEs. Empty files will be treated \
\n               normally like non empty ones. \
\n -loCase    :  files and directories created will get their names in \
\n   -lcNames    all lower case. \
\n -noLCforTytes :  next parameter specifies a list  of types for files to \
\n               keep their name cases even with -lsNames set. \
\n               default: .class;.java \
\n -disk      :  At least 2 s difference in age to be considered different. \
\n -noDif     :  0 s minimum age difference instead of the 2 minutes (default). \
\n -noZone    :  No measures for time zones / day light saving. \
\n -zone      :  Minimum age difference 2 minutes or minimum age difference \
\n               3 hours for source files older than three days. \
\n -xcopy     :  force copy, even if source is older than destination. \
\n -noReplace :  existing (destination) file will not be replaced. \
\n -oneDay    :  consider only files modified in the last 24 hours. \
\n -days n    :  consider only files modified in the last n * 24 hours. \
\n -since time:  consider only files modified since next parameter.\
\n -til time  :  consider only files modified until next parameter.\
\n               Underline _ replaces space for multipart time specifications, \
\n               after -since and -til, like 24.04.2002_15:32 or yesterday_noon.\
\n -r         :  Recursively visit sub-directories also. \
\n -noRec     :  Non recursively, i.e don't visit sub-directories (default). \
\n -reverse   :  Reverse, inter-change the roles of source and destination \
\n               directories. \
\n -forward   :  do not (-)reverse; default (of course). \
%hlpfwopt%\
\n  1.) Parameters containing wild cards (?, *) have to be double quoted. \
\n      Otherwise the JVM may expand this parameter secretly (a java \
\n      feature, that is a dangerous bug). As a substitute methods of this \
\n      framework Frame4J do accept a plus sign (+) for the asterisk (*). \
\n       (end of en.helpText in %propFileName% %propFileVers%, %propFileDate%)


# Update Properties (default setting)

source=
dest=
back=

recursion=false
days=nosetting
since=
til=

difOld=120000
zoneSafe=       true
lcNames=        false
noLCforTypes = .java;.class
noNew=          false
noMd=           false
delEmpty=       true
delEmptySource= true

reverse       = false
option-reverse = reverse = true
option-forward = reverse = false


# selecting directories
thoseDirs=
omitDirs=

## (inter) nationalising of stereotypical expressions

de.toofewpar = Zu wenig Parameter, kein Quell- und Zielverzeichnis.
en.toofewpar = Too few parameters, no source or destination directory.

de.sournodir = Quelle ({0}) ist kein Verzeichnis.
en.sournodir = Source ({0}) is no directory.

de.destnodir = Ziel ({0}) ist kein Verzeichnis.
en.destnodir = Destination ({0}) is no directory.

de.backnodir = Backup ({0}) ist kein Verzeichnis.
en.backnodir = Back-up ({0}) is no directory.

de.updtallfi = Aktualisieren aller Dateien\u0020 
en.updtallfi = Updating all files\u0020

de.incsubdir = (inkl. Unterverzeichnisse) 
en.incsubdir = (including sub-directories) 

de.updtofils = Aktualisieren der Dateien\u0020 
en.updtofils = Updating of files\u0020 

de.since     = \u0020von\u0020
de.until     = \u0020bis\u0020
en.since     = \u0020since\u0020
en.until     = \u0020until\u0020

de.updfrom   = \n      von  \u0020
de.updto     = \n     nach  \u0020
de.updbackup = \n   backup  \u0020
en.updfrom   = \n     from  \u0020
en.updto     = \n       to  \u0020
en.updbackup = \n   backup  \u0020

de.soueqdest = Quelle und Ziel ({0}) sind gleich.
en.soueqdest = Source ({0}) is same as destination.

de.rebtosubd =  Rekursives backup in Unterverzeichnisse ist nicht erlaubt/sinnvoll.
en.rebtosubd =  Recursivly backing up to sub-directories is forbidden/impossible.

de.soueqback = Quelle ({0}) und backup sind gleich.
en.soueqback = Source ({0}) is same as back-up.

de.updnofrep = \u0020     \n {0} Datei{0en} geändert.
en.updnofrep = \u0020     \n {0} file{0s} modified.


